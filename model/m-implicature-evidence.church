(define alpha 1)
(define (rain-prior) (flip 0.5))

;; Helper functions
(define (power lst alpha) (map (lambda (x) (expt x alpha)) lst))

(define (seq start distance end)
  (if (> (+ start distance) end) (list start)
      (append (list start) (seq (+ start distance) distance end))))

; Given whether it's raining in the world, how likely it is
; that the speaker may see no evidence, weak positive evidence,
; regular positive evidence, or strong positive evidence
(define (evidence-prior rain?)
  (case rain?
        ((#t) (multinomial '(no-evidence weak-pos pos strong-pos) '(0.1 0.2 0.4 0.2)))
        ((#f) (multinomial '(no-evidence weak-pos pos strong-pos) '(0.5 0.2 0.1 0.05)))))

; The speaker can say nothing, "p", or "must p"
(define utterances '(rain must))
(define costs '(0.1 10))

(define (utterance-prior)
  (multinomial utterances
               (map (lambda (utterance-cost) (exp (- utterance-cost)))
                    costs)))

; The thetas for "p" and "must p" are drawn uniformly
(define (theta-prior)
  (uniform-draw (seq 0 0.2 1)))

; The probabilities of raining that we consider in the speaker's
; belief distribution (0 means speaker believes there's a 0% of rain)
(define probrains '(0 0.2 0.4 0.6 0.8 1))

; Given the evidence that the speaker has, the speaker's beliefs
; about different chances of rain
(define (probrain-prior evidence)
  (multinomial
   probrains
   (case evidence
         (('no-evidence) '(0.2 0.1 0.1 0.01 0.01 0.01))
         (('weak-pos) '(0.01 0.1 0.2 0.5 0.4 0.2))
         (('pos) '(0.01 0.01 0.1 0.2 0.5 0.4))
         (('strong-pos) '(0.01 0.01 0.05 0.093 0.4 0.6)))
         ))

; Semantics of "p" and "must p"
(define (meaning utterance)
  (case utterance
        (('none) #t)
        ;(('rain) '(equal? probrain 1))
        (('rain) '(> probrain theta-rain))
        (('must) '(> probrain theta-must))
        ))


(define literal-listener
  (mem
   (lambda (evidence utterance theta-rain theta-must
     )
     (enumeration-query
      (define probrain (probrain-prior evidence))
      probrain
      (eval (meaning utterance))))))

(define speaker
  (mem
   (lambda (evidence belief theta-rain theta-must 
           )
     (enumeration-query
      (define utterance (utterance-prior))
      (define interpretation
        (apply multinomial
               (list (first (literal-listener evidence utterance 
                                              theta-rain 
                                              theta-must
                            ))
                     (power (second (literal-listener evidence utterance 
                                                      theta-rain 
                                                      theta-must 
                                    )) alpha))))
      utterance
      (equal? interpretation belief)))))

(define pragmatic-listener
  (mem
   (lambda (utterance)
     (enumeration-query
      (define theta-rain (theta-prior))
      (define theta-must (theta-prior))
      (define rain? (rain-prior))
      (define evidence (evidence-prior rain?))
      (define probrain (probrain-prior evidence))
      rain?
      ;probrain
      ;evidence
      ;theta-must
      (equal? (apply multinomial (speaker evidence probrain theta-rain  
                                          theta-must
                                 )) utterance)))))

;(barplot (pragmatic-listener 'none))
(barplot (pragmatic-listener 'rain))
(barplot (pragmatic-listener 'must))
